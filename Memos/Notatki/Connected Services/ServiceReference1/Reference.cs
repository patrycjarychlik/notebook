//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Notatki.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Response", Namespace="http://schemas.datacontract.org/2004/07/SQL")]
    [System.SerializableAttribute()]
    public partial class Response : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/WcfService")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MemoDto", Namespace="http://schemas.datacontract.org/2004/07/SQL")]
    [System.SerializableAttribute()]
    public partial class MemoDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InitDatabase", ReplyAction="http://tempuri.org/IService1/InitDatabaseResponse")]
        bool InitDatabase();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InitDatabase", ReplyAction="http://tempuri.org/IService1/InitDatabaseResponse")]
        System.Threading.Tasks.Task<bool> InitDatabaseAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InitDB", ReplyAction="http://tempuri.org/IService1/InitDBResponse")]
        void InitDB();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InitDB", ReplyAction="http://tempuri.org/IService1/InitDBResponse")]
        System.Threading.Tasks.Task InitDBAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SignIn", ReplyAction="http://tempuri.org/IService1/SignInResponse")]
        Notatki.ServiceReference1.Response SignIn(string Password, string Login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SignIn", ReplyAction="http://tempuri.org/IService1/SignInResponse")]
        System.Threading.Tasks.Task<Notatki.ServiceReference1.Response> SignInAsync(string Password, string Login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Register", ReplyAction="http://tempuri.org/IService1/RegisterResponse")]
        Notatki.ServiceReference1.Response Register(string Login, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Register", ReplyAction="http://tempuri.org/IService1/RegisterResponse")]
        System.Threading.Tasks.Task<Notatki.ServiceReference1.Response> RegisterAsync(string Login, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        Notatki.ServiceReference1.CompositeType GetDataUsingDataContract(Notatki.ServiceReference1.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<Notatki.ServiceReference1.CompositeType> GetDataUsingDataContractAsync(Notatki.ServiceReference1.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getLogin", ReplyAction="http://tempuri.org/IService1/getLoginResponse")]
        string getLogin();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getLogin", ReplyAction="http://tempuri.org/IService1/getLoginResponse")]
        System.Threading.Tasks.Task<string> getLoginAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/LoadData", ReplyAction="http://tempuri.org/IService1/LoadDataResponse")]
        System.Data.DataTable LoadData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/LoadData", ReplyAction="http://tempuri.org/IService1/LoadDataResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> LoadDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateData", ReplyAction="http://tempuri.org/IService1/UpdateDataResponse")]
        Notatki.ServiceReference1.MemoDto[] UpdateData(System.Data.DataTable table);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateData", ReplyAction="http://tempuri.org/IService1/UpdateDataResponse")]
        System.Threading.Tasks.Task<Notatki.ServiceReference1.MemoDto[]> UpdateDataAsync(System.Data.DataTable table);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CommitAndUpdate", ReplyAction="http://tempuri.org/IService1/CommitAndUpdateResponse")]
        void CommitAndUpdate(System.Data.DataTable table);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CommitAndUpdate", ReplyAction="http://tempuri.org/IService1/CommitAndUpdateResponse")]
        System.Threading.Tasks.Task CommitAndUpdateAsync(System.Data.DataTable table);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteNote", ReplyAction="http://tempuri.org/IService1/DeleteNoteResponse")]
        void DeleteNote(System.Data.DataTable table, string Title, string Text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteNote", ReplyAction="http://tempuri.org/IService1/DeleteNoteResponse")]
        System.Threading.Tasks.Task DeleteNoteAsync(System.Data.DataTable table, string Title, string Text);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : Notatki.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<Notatki.ServiceReference1.IService1>, Notatki.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public bool InitDatabase() {
            return base.Channel.InitDatabase();
        }
        
        public System.Threading.Tasks.Task<bool> InitDatabaseAsync() {
            return base.Channel.InitDatabaseAsync();
        }
        
        public void InitDB() {
            base.Channel.InitDB();
        }
        
        public System.Threading.Tasks.Task InitDBAsync() {
            return base.Channel.InitDBAsync();
        }
        
        public Notatki.ServiceReference1.Response SignIn(string Password, string Login) {
            return base.Channel.SignIn(Password, Login);
        }
        
        public System.Threading.Tasks.Task<Notatki.ServiceReference1.Response> SignInAsync(string Password, string Login) {
            return base.Channel.SignInAsync(Password, Login);
        }
        
        public Notatki.ServiceReference1.Response Register(string Login, string Password) {
            return base.Channel.Register(Login, Password);
        }
        
        public System.Threading.Tasks.Task<Notatki.ServiceReference1.Response> RegisterAsync(string Login, string Password) {
            return base.Channel.RegisterAsync(Login, Password);
        }
        
        public Notatki.ServiceReference1.CompositeType GetDataUsingDataContract(Notatki.ServiceReference1.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<Notatki.ServiceReference1.CompositeType> GetDataUsingDataContractAsync(Notatki.ServiceReference1.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public string getLogin() {
            return base.Channel.getLogin();
        }
        
        public System.Threading.Tasks.Task<string> getLoginAsync() {
            return base.Channel.getLoginAsync();
        }
        
        public System.Data.DataTable LoadData() {
            return base.Channel.LoadData();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> LoadDataAsync() {
            return base.Channel.LoadDataAsync();
        }
        
        public Notatki.ServiceReference1.MemoDto[] UpdateData(System.Data.DataTable table) {
            return base.Channel.UpdateData(table);
        }
        
        public System.Threading.Tasks.Task<Notatki.ServiceReference1.MemoDto[]> UpdateDataAsync(System.Data.DataTable table) {
            return base.Channel.UpdateDataAsync(table);
        }
        
        public void CommitAndUpdate(System.Data.DataTable table) {
            base.Channel.CommitAndUpdate(table);
        }
        
        public System.Threading.Tasks.Task CommitAndUpdateAsync(System.Data.DataTable table) {
            return base.Channel.CommitAndUpdateAsync(table);
        }
        
        public void DeleteNote(System.Data.DataTable table, string Title, string Text) {
            base.Channel.DeleteNote(table, Title, Text);
        }
        
        public System.Threading.Tasks.Task DeleteNoteAsync(System.Data.DataTable table, string Title, string Text) {
            return base.Channel.DeleteNoteAsync(table, Title, Text);
        }
    }
}
